1. iphone 화면 기준으로 코딩할것.
2. 에뮬레이터 화면은 작은것으로 설치할것
3. typeScript는 매개변수 리턴값 변수
4. k=flex 1 100% , (a = flex 1 , b = flex 1  ==== 50%:50%)


Modal
return(
    component1
    component2
    modalComponent3
)

가장 밑에 있는 modalComponent3 가 컴포넌트1,2를 덮게된디ㅏ. 
가장 아래에 있는 컴포넌트가 최상위로 쌓이게 된다.
모달은 기존 컴포넌트 위를 덮는 형태이므로 가장 아래에 위치해야 한다.(positon="absolute")

child가 1개여야만 한다는 에러가 뜰 경우 Tab.Group를 사용하여 묶어주면 된다.

Redux
 - slice가 모여서 reducer가 되고 reducer가 모여서 store 가 된다. 
 - provider 밖에서는 useSelector를 사용할 수 없다. 

 Async await
 - useEffect는 콜백함수를 리턴하므로 aysnc await 사용불가
 - useCallback은 사용가능


Config URL
 - android : http://10.0.2.2:3105 
 - iso : http://localhost:3105

Token 저장
 - async storage : 앱을 껏다가 켜도 계속해서 저장되어 있는 공간
 - EncryptedStorage


reducer
 - reducer:동기액션
 - extraReducer:비동기액션
 - action : state를 바꾸는 행위
 - dispatch : action을 실행하는 함수
 - reducer : 액션이 실행되면 state를 바꾸는 로직


Web soket I.O
 - 실시간 서버통신
 - socket.emit('login', 'hello'); 데이터 보내기
   socket.on('hello', helloCallback); 데이터 받기
   socket.off('hello', helloCallback) 소켓 종료하기

typeScript  any or unKnown 으로 보이면 타입스크립트가 추론을 못하는 것이다.

navigation : 스크린이랑 연결된 컴포넌트들은 props에 navigation을 가진다. 연결되지 않은 화면에는 navigation이 없다.
  로그인 한 상태에서의 타입은 LoggedInParamList 안한 타입은 RootStackParamList 이다.
  const navigation = useNavigation<NavigationProp<LoggedInParamList>>();

<Tab.Navigator>
    <Tab.Screen
      name="Orders"
      component={Orders}
      options={{title: '오더 목록'}}
    />
    <Tab.Screen
      name="Delivery"
      component={Delivery}
      options={{headerShown: false}}
    />
    <Tab.Screen
      name="Settings"
      component={Settings}
      options={{title: '내 정보'}}
    />
  </Tab.Navigator>
  ) : (
  <Stack.Navigator>
    <Stack.Screen
      name="SignIn"
      component={SignIn}
      options={{title: '로그인'}}
    />
    <Stack.Screen
      name="SignUp"
      component={SignUp}
      options={{title: '회원가입'}}
    />
  </Stack.Navigator>